package messenger2;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;

public class ServerProgram {

	public static void main(String[] args) {
		int port = 3005;
		Scanner sc = new Scanner(System.in);
		
		BufferedReader br = null;	// 입력용 스트림
		PrintWriter pw = null;	// 출력용 스트림
		
		try {
			// 2. ServerSocket 객체 생성시 포트 결합
			try(ServerSocket server = new ServerSocket(port)) {
			
			// 3. 클라이언트로부터 연결 요청이 오면 수락하고, 통신할 수 있는 소켓 객체 생성
			System.out.println("클라이언트의 요청을 기다리고 있음...");
			Socket socket = server.accept();
			System.out.println(socket.getInetAddress().getHostAddress() + "가 연결을 요청함!!!");
			
			// 5. 보조 스트림(기반스트림을 인수로 넣음)
			// br = new BufferedReader(new InputStreamReader(is));
			br = new BufferedReader(new InputStreamReader(socket.getInputStream()));	// 입력
			pw = new PrintWriter(socket.getOutputStream());								// 출력
			
			pw.println("환영합니다💌");		
			pw.flush();		// 현재 버퍼있는 스트림을 강제로 보내고 버퍼를 비움
			
			while(true) {
				// 클라이언트 측으로부터 받은 메시지
				System.out.println("클라이언트 : " + br.readLine());
				
				// 서버에서 클라이언트 측으로 보내는 메시지
				System.out.println("서버 : ");
				pw.println(sc.nextLine());
				pw.flush();
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
}
